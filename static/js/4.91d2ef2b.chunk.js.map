{"version":3,"sources":["assets/images/preloader.svg","components/main/EditForm.jsx","routes/EditQuote.jsx"],"names":["module","exports","EditForm","quote","token","useSelector","state","dispatch","useDispatch","translate","useTranslate","history","useHistory","useState","validation","setValidation","response","setResponse","_id","to","onSubmit","e","preventDefault","obj","Object","values","target","elements","filter","el","name","reduce","acc","value","trim","author","sr","endpoint","API","update","create","method","fetch","headers","body","JSON","stringify","then","res","json","message","action","updateQuote","addQuote","push","catch","err","type","defaultValue","htmlFor","title","id","autoFocus","cols","rows","ms","source","tags","wiki","className","closePopup","EditQuote","match","params","admin","allQuotes","loading","setLoading","find","q","setQuote","useEffect","read","src","preloader","alt"],"mappings":"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","file":"static/js/4.91d2ef2b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloader.8c6459b9.svg\";","import React, {useState} from 'react'\nimport {Link, useHistory} from 'react-router-dom'\nimport {useSelector, useDispatch} from 'react-redux'\n\nimport {addQuote, updateQuote, useTranslate} from '../../store/actions'\nimport MessagePopup from './MessagePopup'\nimport {API} from '../../config/api'\n\nconst EditForm = ({ quote }) => {\n  const {token} = useSelector(state => state)\n  const dispatch = useDispatch()\n  const translate = useTranslate()\n  const history = useHistory()\n\n  const [validation, setValidation] = useState('')\n  const [response, setResponse] = useState('')\n\n  const postQuote = e => {\n    e.preventDefault()\n    setValidation('')\n    const obj = Object.values(e.target.elements)\n      .filter(el => el.name)\n      .reduce((acc, el) => ({...acc, [el.name]: el.value.trim()}), {})\n\n    if (!obj.author || !obj.sr) return setValidation(translate('REQUIRED_FIELDS'))\n\n    const endpoint = obj._id ? API.update : API.create\n    const method = obj._id ? 'PUT' : 'POST'\n    fetch(endpoint, {\n      method,\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ ...obj, token })\n    })\n      .then(res => res.json())\n      .then(res => {\n        if (res.message !== 'SUCCESS_SAVED') return\n        const action = obj._id ? updateQuote : addQuote\n        dispatch(action(res.quote))\n        history.push(`/citat/${res.quote._id}`)\n      })\n      .catch(err => {\n        setResponse(translate('NETWORK_PROBLEM'))\n      })\n  }\n\n  return (\n    <div>\n      <h1>\n        {translate(quote ? 'EDIT_QUOTE' : 'ADD_QUOTE')}\n        {quote && quote._id && <small><sup>(<Link to={`/citat/${quote._id}`}>show</Link>)</sup></small>}\n      </h1>\n\n      <form onSubmit={postQuote}>\n        <input type=\"hidden\" name=\"_id\" defaultValue={quote && quote._id} />\n        <p>\n          <label htmlFor=\"author\" title={translate('AUTHOR_TIP')}>{translate('AUTHOR')} *</label><br/>\n          <input name=\"author\" id=\"author\" defaultValue={quote && quote.author} autoFocus />\n        </p>\n        <p>\n          <label htmlFor=\"sr\" >Tekst ({translate('SERBOCROATIAN')}) *</label><br />\n          <textarea name=\"sr\" id=\"sr\" defaultValue={quote && quote.sr} cols=\"60\" rows=\"5\"></textarea>\n        </p>\n        <p>\n          <label htmlFor=\"ms\" >Tekst ({translate('INTERSLAVIC')}) </label><br />\n          <textarea name=\"ms\" id=\"ms\" defaultValue={quote && quote.ms} cols=\"60\" rows=\"5\"></textarea>\n        </p>\n        <p>\n          <label htmlFor=\"source\">{translate('SOURCE')} </label><br/>\n          <input name='source' id='source' defaultValue={quote && quote.source} />\n        </p>\n        <p>\n          <label htmlFor=\"tags\">{translate('TAGS')} </label><br/>\n          <input name='tags' id='tags' defaultValue={quote && quote.tags} />\n        </p>\n        <p>\n          <label htmlFor=\"wiki\">Wiki </label><br/>\n          <input name='wiki' id='wiki' defaultValue={quote && quote.wiki} />\n        </p>\n        {validation && <p className=\"red\">{validation}</p>}\n        <button type=\"submit\">{translate('POST')}</button>\n      </form>\n\n      {response && <MessagePopup message={response} closePopup={() => setResponse('')} />}\n    </div>\n  )\n}\n\nexport default EditForm\n","import React, { useEffect, useState } from 'react'\nimport {useSelector} from 'react-redux'\n\nimport {useTranslate} from '../store/actions'\nimport EditForm from '../components/main/EditForm'\nimport preloader from '../assets/images/preloader.svg'\nimport {API} from '../config/api'\n\nconst EditQuote = ({ match }) => {\n  const { id } = match.params\n  const {admin, allQuotes} = useSelector(state => state)\n  const translate = useTranslate()\n\n  const [loading, setLoading] = useState(false)\n  const [quote, setQuote] = useState(allQuotes.find(q => q._id === id))\n\n  useEffect(() => {\n    if (quote && quote.id === id) return\n    setLoading(true)\n    fetch(`${API.read}/id/${id}`)\n      .then(res => res.json())\n      .then(quote => {\n        setLoading(false)\n        setQuote(quote)\n      })\n  }, [id, quote])\n\n  if (loading) return <img src={preloader} alt=\"loading...\" />\n  if (!admin) return <p>{translate('ADMIN_REQUIRED')}</p>\n\n  return <EditForm quote={quote} />\n}\n\nexport default EditQuote\n"],"sourceRoot":""}